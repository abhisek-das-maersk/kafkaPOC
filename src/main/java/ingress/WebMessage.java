/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ingress;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3466258870004201047L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebMessage\",\"namespace\":\"com.maersk.notification.avro.ingress\",\"fields\":[{\"name\":\"UserName\",\"type\":\"string\",\"doc\":\"User identifier that is accessing the web (username field from frJwt in local storage)\"},{\"name\":\"CustomerCode\",\"type\":\"string\",\"doc\":\"Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract\"},{\"name\":\"Brand\",\"type\":{\"type\":\"enum\",\"name\":\"WebChannelBrand\",\"symbols\":[\"MSK\",\"SEA\",\"MLL\"]},\"namespace\":\"com.maersk.notification.avro.channel\"},{\"name\":\"Title\",\"type\":\"string\",\"doc\":\"Main title of the notification on the notifications page.\"},{\"name\":\"Body\",\"type\":\"string\",\"doc\":\"Body of the notification available after expansion of the notification on the notifications page.\"},{\"name\":\"Location\",\"type\":[\"null\",\"string\"],\"doc\":\"Location to be redirected to after clicking on the notification.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** User identifier that is accessing the web (username field from frJwt in local storage) */
  private java.lang.CharSequence UserName;
  /** Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract */
  private java.lang.CharSequence CustomerCode;
  private WebChannelBrand Brand;
  /** Main title of the notification on the notifications page. */
  private java.lang.CharSequence Title;
  /** Body of the notification available after expansion of the notification on the notifications page. */
  private java.lang.CharSequence Body;
  /** Location to be redirected to after clicking on the notification. */
  private java.lang.CharSequence Location;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebMessage() {}

  /**
   * All-args constructor.
   * @param UserName User identifier that is accessing the web (username field from frJwt in local storage)
   * @param CustomerCode Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
   * @param Brand The new value for Brand
   * @param Title Main title of the notification on the notifications page.
   * @param Body Body of the notification available after expansion of the notification on the notifications page.
   * @param Location Location to be redirected to after clicking on the notification.
   */
  public WebMessage(java.lang.CharSequence UserName, java.lang.CharSequence CustomerCode, WebChannelBrand Brand, java.lang.CharSequence Title, java.lang.CharSequence Body, java.lang.CharSequence Location) {
    this.UserName = UserName;
    this.CustomerCode = CustomerCode;
    this.Brand = Brand;
    this.Title = Title;
    this.Body = Body;
    this.Location = Location;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return UserName;
    case 1: return CustomerCode;
    case 2: return Brand;
    case 3: return Title;
    case 4: return Body;
    case 5: return Location;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: UserName = (java.lang.CharSequence)value$; break;
    case 1: CustomerCode = (java.lang.CharSequence)value$; break;
    case 2: Brand = (WebChannelBrand)value$; break;
    case 3: Title = (java.lang.CharSequence)value$; break;
    case 4: Body = (java.lang.CharSequence)value$; break;
    case 5: Location = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'UserName' field.
   * @return User identifier that is accessing the web (username field from frJwt in local storage)
   */
  public java.lang.CharSequence getUserName() {
    return UserName;
  }


  /**
   * Sets the value of the 'UserName' field.
   * User identifier that is accessing the web (username field from frJwt in local storage)
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.UserName = value;
  }

  /**
   * Gets the value of the 'CustomerCode' field.
   * @return Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
   */
  public java.lang.CharSequence getCustomerCode() {
    return CustomerCode;
  }


  /**
   * Sets the value of the 'CustomerCode' field.
   * Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
   * @param value the value to set.
   */
  public void setCustomerCode(java.lang.CharSequence value) {
    this.CustomerCode = value;
  }

  /**
   * Gets the value of the 'Brand' field.
   * @return The value of the 'Brand' field.
   */
  public WebChannelBrand getBrand() {
    return Brand;
  }


  /**
   * Sets the value of the 'Brand' field.
   * @param value the value to set.
   */
  public void setBrand(WebChannelBrand value) {
    this.Brand = value;
  }

  /**
   * Gets the value of the 'Title' field.
   * @return Main title of the notification on the notifications page.
   */
  public java.lang.CharSequence getTitle() {
    return Title;
  }


  /**
   * Sets the value of the 'Title' field.
   * Main title of the notification on the notifications page.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.Title = value;
  }

  /**
   * Gets the value of the 'Body' field.
   * @return Body of the notification available after expansion of the notification on the notifications page.
   */
  public java.lang.CharSequence getBody() {
    return Body;
  }


  /**
   * Sets the value of the 'Body' field.
   * Body of the notification available after expansion of the notification on the notifications page.
   * @param value the value to set.
   */
  public void setBody(java.lang.CharSequence value) {
    this.Body = value;
  }

  /**
   * Gets the value of the 'Location' field.
   * @return Location to be redirected to after clicking on the notification.
   */
  public java.lang.CharSequence getLocation() {
    return Location;
  }


  /**
   * Sets the value of the 'Location' field.
   * Location to be redirected to after clicking on the notification.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.Location = value;
  }

  /**
   * Creates a new WebMessage RecordBuilder.
   * @return A new WebMessage RecordBuilder
   */
  public static WebMessage.Builder newBuilder() {
    return new WebMessage.Builder();
  }

  /**
   * Creates a new WebMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebMessage RecordBuilder
   */
  public static WebMessage.Builder newBuilder(WebMessage.Builder other) {
    if (other == null) {
      return new WebMessage.Builder();
    } else {
      return new WebMessage.Builder(other);
    }
  }

  /**
   * Creates a new WebMessage RecordBuilder by copying an existing WebMessage instance.
   * @param other The existing instance to copy.
   * @return A new WebMessage RecordBuilder
   */
  public static WebMessage.Builder newBuilder(WebMessage other) {
    if (other == null) {
      return new WebMessage.Builder();
    } else {
      return new WebMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebMessage>
    implements org.apache.avro.data.RecordBuilder<WebMessage> {

    /** User identifier that is accessing the web (username field from frJwt in local storage) */
    private java.lang.CharSequence UserName;
    /** Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract */
    private java.lang.CharSequence CustomerCode;
    private WebChannelBrand Brand;
    /** Main title of the notification on the notifications page. */
    private java.lang.CharSequence Title;
    /** Body of the notification available after expansion of the notification on the notifications page. */
    private java.lang.CharSequence Body;
    /** Location to be redirected to after clicking on the notification. */
    private java.lang.CharSequence Location;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(WebMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.UserName)) {
        this.UserName = data().deepCopy(fields()[0].schema(), other.UserName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CustomerCode)) {
        this.CustomerCode = data().deepCopy(fields()[1].schema(), other.CustomerCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Brand)) {
        this.Brand = data().deepCopy(fields()[2].schema(), other.Brand);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Title)) {
        this.Title = data().deepCopy(fields()[3].schema(), other.Title);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Body)) {
        this.Body = data().deepCopy(fields()[4].schema(), other.Body);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Location)) {
        this.Location = data().deepCopy(fields()[5].schema(), other.Location);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing WebMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(WebMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.UserName)) {
        this.UserName = data().deepCopy(fields()[0].schema(), other.UserName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CustomerCode)) {
        this.CustomerCode = data().deepCopy(fields()[1].schema(), other.CustomerCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Brand)) {
        this.Brand = data().deepCopy(fields()[2].schema(), other.Brand);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Title)) {
        this.Title = data().deepCopy(fields()[3].schema(), other.Title);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Body)) {
        this.Body = data().deepCopy(fields()[4].schema(), other.Body);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Location)) {
        this.Location = data().deepCopy(fields()[5].schema(), other.Location);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'UserName' field.
      * User identifier that is accessing the web (username field from frJwt in local storage)
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return UserName;
    }


    /**
      * Sets the value of the 'UserName' field.
      * User identifier that is accessing the web (username field from frJwt in local storage)
      * @param value The value of 'UserName'.
      * @return This builder.
      */
    public WebMessage.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.UserName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'UserName' field has been set.
      * User identifier that is accessing the web (username field from frJwt in local storage)
      * @return True if the 'UserName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'UserName' field.
      * User identifier that is accessing the web (username field from frJwt in local storage)
      * @return This builder.
      */
    public WebMessage.Builder clearUserName() {
      UserName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerCode' field.
      * Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
      * @return The value.
      */
    public java.lang.CharSequence getCustomerCode() {
      return CustomerCode;
    }


    /**
      * Sets the value of the 'CustomerCode' field.
      * Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
      * @param value The value of 'CustomerCode'.
      * @return This builder.
      */
    public WebMessage.Builder setCustomerCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CustomerCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerCode' field has been set.
      * Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
      * @return True if the 'CustomerCode' field has been set, false otherwise.
      */
    public boolean hasCustomerCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CustomerCode' field.
      * Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract
      * @return This builder.
      */
    public WebMessage.Builder clearCustomerCode() {
      CustomerCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Brand' field.
      * @return The value.
      */
    public WebChannelBrand getBrand() {
      return Brand;
    }


    /**
      * Sets the value of the 'Brand' field.
      * @param value The value of 'Brand'.
      * @return This builder.
      */
    public WebMessage.Builder setBrand(WebChannelBrand value) {
      validate(fields()[2], value);
      this.Brand = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Brand' field has been set.
      * @return True if the 'Brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Brand' field.
      * @return This builder.
      */
    public WebMessage.Builder clearBrand() {
      Brand = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Title' field.
      * Main title of the notification on the notifications page.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return Title;
    }


    /**
      * Sets the value of the 'Title' field.
      * Main title of the notification on the notifications page.
      * @param value The value of 'Title'.
      * @return This builder.
      */
    public WebMessage.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Title = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Title' field has been set.
      * Main title of the notification on the notifications page.
      * @return True if the 'Title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Title' field.
      * Main title of the notification on the notifications page.
      * @return This builder.
      */
    public WebMessage.Builder clearTitle() {
      Title = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Body' field.
      * Body of the notification available after expansion of the notification on the notifications page.
      * @return The value.
      */
    public java.lang.CharSequence getBody() {
      return Body;
    }


    /**
      * Sets the value of the 'Body' field.
      * Body of the notification available after expansion of the notification on the notifications page.
      * @param value The value of 'Body'.
      * @return This builder.
      */
    public WebMessage.Builder setBody(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.Body = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Body' field has been set.
      * Body of the notification available after expansion of the notification on the notifications page.
      * @return True if the 'Body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Body' field.
      * Body of the notification available after expansion of the notification on the notifications page.
      * @return This builder.
      */
    public WebMessage.Builder clearBody() {
      Body = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Location' field.
      * Location to be redirected to after clicking on the notification.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return Location;
    }


    /**
      * Sets the value of the 'Location' field.
      * Location to be redirected to after clicking on the notification.
      * @param value The value of 'Location'.
      * @return This builder.
      */
    public WebMessage.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.Location = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Location' field has been set.
      * Location to be redirected to after clicking on the notification.
      * @return True if the 'Location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Location' field.
      * Location to be redirected to after clicking on the notification.
      * @return This builder.
      */
    public WebMessage.Builder clearLocation() {
      Location = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebMessage build() {
      try {
        WebMessage record = new WebMessage();
        record.UserName = fieldSetFlags()[0] ? this.UserName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CustomerCode = fieldSetFlags()[1] ? this.CustomerCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Brand = fieldSetFlags()[2] ? this.Brand : (WebChannelBrand) defaultValue(fields()[2]);
        record.Title = fieldSetFlags()[3] ? this.Title : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Body = fieldSetFlags()[4] ? this.Body : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.Location = fieldSetFlags()[5] ? this.Location : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebMessage>
    READER$ = (org.apache.avro.io.DatumReader<WebMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.UserName);

    out.writeString(this.CustomerCode);

    out.writeEnum(this.Brand.ordinal());

    out.writeString(this.Title);

    out.writeString(this.Body);

    if (this.Location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.Location);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.UserName = in.readString(this.UserName instanceof Utf8 ? (Utf8)this.UserName : null);

      this.CustomerCode = in.readString(this.CustomerCode instanceof Utf8 ? (Utf8)this.CustomerCode : null);

      this.Brand = WebChannelBrand.values()[in.readEnum()];

      this.Title = in.readString(this.Title instanceof Utf8 ? (Utf8)this.Title : null);

      this.Body = in.readString(this.Body instanceof Utf8 ? (Utf8)this.Body : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.Location = null;
      } else {
        this.Location = in.readString(this.Location instanceof Utf8 ? (Utf8)this.Location : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.UserName = in.readString(this.UserName instanceof Utf8 ? (Utf8)this.UserName : null);
          break;

        case 1:
          this.CustomerCode = in.readString(this.CustomerCode instanceof Utf8 ? (Utf8)this.CustomerCode : null);
          break;

        case 2:
          this.Brand = WebChannelBrand.values()[in.readEnum()];
          break;

        case 3:
          this.Title = in.readString(this.Title instanceof Utf8 ? (Utf8)this.Title : null);
          break;

        case 4:
          this.Body = in.readString(this.Body instanceof Utf8 ? (Utf8)this.Body : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Location = null;
          } else {
            this.Location = in.readString(this.Location instanceof Utf8 ? (Utf8)this.Location : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










