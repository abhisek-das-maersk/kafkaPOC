/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ingress;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Attachment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6766801678844954541L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attachment\",\"namespace\":\"com.maersk.notification.avro.ingress\",\"fields\":[{\"name\":\"Filename\",\"type\":\"string\"},{\"name\":\"Content\",\"type\":\"bytes\"},{\"name\":\"Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Mime type of the file contents\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Attachment> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Attachment> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Attachment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Attachment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Attachment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Attachment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Attachment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Attachment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Attachment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence Filename;
  private java.nio.ByteBuffer Content;
  /** Mime type of the file contents */
  private java.lang.CharSequence Type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Attachment() {}

  /**
   * All-args constructor.
   * @param Filename The new value for Filename
   * @param Content The new value for Content
   * @param Type Mime type of the file contents
   */
  public Attachment(java.lang.CharSequence Filename, java.nio.ByteBuffer Content, java.lang.CharSequence Type) {
    this.Filename = Filename;
    this.Content = Content;
    this.Type = Type;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Filename;
    case 1: return Content;
    case 2: return Type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Filename = (java.lang.CharSequence)value$; break;
    case 1: Content = (java.nio.ByteBuffer)value$; break;
    case 2: Type = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Filename' field.
   * @return The value of the 'Filename' field.
   */
  public java.lang.CharSequence getFilename() {
    return Filename;
  }


  /**
   * Sets the value of the 'Filename' field.
   * @param value the value to set.
   */
  public void setFilename(java.lang.CharSequence value) {
    this.Filename = value;
  }

  /**
   * Gets the value of the 'Content' field.
   * @return The value of the 'Content' field.
   */
  public java.nio.ByteBuffer getContent() {
    return Content;
  }


  /**
   * Sets the value of the 'Content' field.
   * @param value the value to set.
   */
  public void setContent(java.nio.ByteBuffer value) {
    this.Content = value;
  }

  /**
   * Gets the value of the 'Type' field.
   * @return Mime type of the file contents
   */
  public java.lang.CharSequence getType() {
    return Type;
  }


  /**
   * Sets the value of the 'Type' field.
   * Mime type of the file contents
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Creates a new Attachment RecordBuilder.
   * @return A new Attachment RecordBuilder
   */
  public static Attachment.Builder newBuilder() {
    return new Attachment.Builder();
  }

  /**
   * Creates a new Attachment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attachment RecordBuilder
   */
  public static Attachment.Builder newBuilder(Attachment.Builder other) {
    if (other == null) {
      return new Attachment.Builder();
    } else {
      return new Attachment.Builder(other);
    }
  }

  /**
   * Creates a new Attachment RecordBuilder by copying an existing Attachment instance.
   * @param other The existing instance to copy.
   * @return A new Attachment RecordBuilder
   */
  public static Attachment.Builder newBuilder(Attachment other) {
    if (other == null) {
      return new Attachment.Builder();
    } else {
      return new Attachment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Attachment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attachment>
    implements org.apache.avro.data.RecordBuilder<Attachment> {

    private java.lang.CharSequence Filename;
    private java.nio.ByteBuffer Content;
    /** Mime type of the file contents */
    private java.lang.CharSequence Type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Attachment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Filename)) {
        this.Filename = data().deepCopy(fields()[0].schema(), other.Filename);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Content)) {
        this.Content = data().deepCopy(fields()[1].schema(), other.Content);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Type)) {
        this.Type = data().deepCopy(fields()[2].schema(), other.Type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Attachment instance
     * @param other The existing instance to copy.
     */
    private Builder(Attachment other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Filename)) {
        this.Filename = data().deepCopy(fields()[0].schema(), other.Filename);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Content)) {
        this.Content = data().deepCopy(fields()[1].schema(), other.Content);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Type)) {
        this.Type = data().deepCopy(fields()[2].schema(), other.Type);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Filename' field.
      * @return The value.
      */
    public java.lang.CharSequence getFilename() {
      return Filename;
    }


    /**
      * Sets the value of the 'Filename' field.
      * @param value The value of 'Filename'.
      * @return This builder.
      */
    public Attachment.Builder setFilename(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Filename = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Filename' field has been set.
      * @return True if the 'Filename' field has been set, false otherwise.
      */
    public boolean hasFilename() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Filename' field.
      * @return This builder.
      */
    public Attachment.Builder clearFilename() {
      Filename = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Content' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getContent() {
      return Content;
    }


    /**
      * Sets the value of the 'Content' field.
      * @param value The value of 'Content'.
      * @return This builder.
      */
    public Attachment.Builder setContent(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.Content = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Content' field has been set.
      * @return True if the 'Content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Content' field.
      * @return This builder.
      */
    public Attachment.Builder clearContent() {
      Content = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Type' field.
      * Mime type of the file contents
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return Type;
    }


    /**
      * Sets the value of the 'Type' field.
      * Mime type of the file contents
      * @param value The value of 'Type'.
      * @return This builder.
      */
    public Attachment.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Type' field has been set.
      * Mime type of the file contents
      * @return True if the 'Type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Type' field.
      * Mime type of the file contents
      * @return This builder.
      */
    public Attachment.Builder clearType() {
      Type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Attachment build() {
      try {
        Attachment record = new Attachment();
        record.Filename = fieldSetFlags()[0] ? this.Filename : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Content = fieldSetFlags()[1] ? this.Content : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.Type = fieldSetFlags()[2] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Attachment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Attachment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Attachment>
    READER$ = (org.apache.avro.io.DatumReader<Attachment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.Filename);

    out.writeBytes(this.Content);

    if (this.Type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.Type);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Filename = in.readString(this.Filename instanceof Utf8 ? (Utf8)this.Filename : null);

      this.Content = in.readBytes(this.Content);

      if (in.readIndex() != 1) {
        in.readNull();
        this.Type = null;
      } else {
        this.Type = in.readString(this.Type instanceof Utf8 ? (Utf8)this.Type : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Filename = in.readString(this.Filename instanceof Utf8 ? (Utf8)this.Filename : null);
          break;

        case 1:
          this.Content = in.readBytes(this.Content);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Type = null;
          } else {
            this.Type = in.readString(this.Type instanceof Utf8 ? (Utf8)this.Type : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










