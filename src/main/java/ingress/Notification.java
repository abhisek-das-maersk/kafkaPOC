/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ingress;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Notification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6686113437659512413L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notification\",\"namespace\":\"com.maersk.notification.avro.ingress\",\"fields\":[{\"name\":\"NotificationId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"Unique identifier of the notification\"},{\"name\":\"EventTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Date of event creation\"},{\"name\":\"System\",\"type\":\"string\",\"doc\":\"Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)\"},{\"name\":\"Message\",\"type\":[{\"type\":\"record\",\"name\":\"EmailMessage\",\"fields\":[{\"name\":\"TemplateId\",\"type\":\"string\",\"doc\":\"Identifier of the email template to be used\"},{\"name\":\"Recipient\",\"type\":\"string\",\"doc\":\"Email of the recipient that should receive email with the message\"},{\"name\":\"EmailVariables\",\"type\":\"string\",\"doc\":\"JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}\",\"aliases\":[\"variables\"]},{\"name\":\"Attachments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Attachment\",\"fields\":[{\"name\":\"Filename\",\"type\":\"string\"},{\"name\":\"Content\",\"type\":\"bytes\"},{\"name\":\"Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Mime type of the file contents\",\"default\":null}]}},\"default\":[]}]},{\"type\":\"record\",\"name\":\"WebMessage\",\"fields\":[{\"name\":\"UserName\",\"type\":\"string\",\"doc\":\"User identifier that is accessing the web (username field from frJwt in local storage)\"},{\"name\":\"CustomerCode\",\"type\":\"string\",\"doc\":\"Customer code that the message should be bound to as part of customer_code + user_id + brand identification contract\"},{\"name\":\"Brand\",\"type\":{\"type\":\"enum\",\"name\":\"WebChannelBrand\",\"symbols\":[\"MSK\",\"SEA\",\"MLL\"]},\"namespace\":\"com.maersk.notification.avro.channel\"},{\"name\":\"Title\",\"type\":\"string\",\"doc\":\"Main title of the notification on the notifications page.\"},{\"name\":\"Body\",\"type\":\"string\",\"doc\":\"Body of the notification available after expansion of the notification on the notifications page.\"},{\"name\":\"Location\",\"type\":[\"null\",\"string\"],\"doc\":\"Location to be redirected to after clicking on the notification.\",\"default\":null}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Notification> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notification> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Notification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Notification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Notification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Notification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Notification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Notification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Notification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier of the notification */
  private java.util.UUID NotificationId;
  /** Date of event creation */
  private java.time.Instant EventTimestamp;
  /** Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense) */
  private java.lang.CharSequence System;
  private java.lang.Object Message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notification() {}

  /**
   * All-args constructor.
   * @param NotificationId Unique identifier of the notification
   * @param EventTimestamp Date of event creation
   * @param System Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
   * @param Message The new value for Message
   */
  public Notification(java.util.UUID NotificationId, java.time.Instant EventTimestamp, java.lang.CharSequence System, java.lang.Object Message) {
    this.NotificationId = NotificationId;
    this.EventTimestamp = EventTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.System = System;
    this.Message = Message;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return NotificationId;
    case 1: return EventTimestamp;
    case 2: return System;
    case 3: return Message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: NotificationId = (java.util.UUID)value$; break;
    case 1: EventTimestamp = (java.time.Instant)value$; break;
    case 2: System = (java.lang.CharSequence)value$; break;
    case 3: Message = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'NotificationId' field.
   * @return Unique identifier of the notification
   */
  public java.util.UUID getNotificationId() {
    return NotificationId;
  }


  /**
   * Sets the value of the 'NotificationId' field.
   * Unique identifier of the notification
   * @param value the value to set.
   */
  public void setNotificationId(java.util.UUID value) {
    this.NotificationId = value;
  }

  /**
   * Gets the value of the 'EventTimestamp' field.
   * @return Date of event creation
   */
  public java.time.Instant getEventTimestamp() {
    return EventTimestamp;
  }


  /**
   * Sets the value of the 'EventTimestamp' field.
   * Date of event creation
   * @param value the value to set.
   */
  public void setEventTimestamp(java.time.Instant value) {
    this.EventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'System' field.
   * @return Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
   */
  public java.lang.CharSequence getSystem() {
    return System;
  }


  /**
   * Sets the value of the 'System' field.
   * Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
   * @param value the value to set.
   */
  public void setSystem(java.lang.CharSequence value) {
    this.System = value;
  }

  /**
   * Gets the value of the 'Message' field.
   * @return The value of the 'Message' field.
   */
  public java.lang.Object getMessage() {
    return Message;
  }


  /**
   * Sets the value of the 'Message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.Object value) {
    this.Message = value;
  }

  /**
   * Creates a new Notification RecordBuilder.
   * @return A new Notification RecordBuilder
   */
  public static Notification.Builder newBuilder() {
    return new Notification.Builder();
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notification RecordBuilder
   */
  public static Notification.Builder newBuilder(Notification.Builder other) {
    if (other == null) {
      return new Notification.Builder();
    } else {
      return new Notification.Builder(other);
    }
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Notification instance.
   * @param other The existing instance to copy.
   * @return A new Notification RecordBuilder
   */
  public static Notification.Builder newBuilder(Notification other) {
    if (other == null) {
      return new Notification.Builder();
    } else {
      return new Notification.Builder(other);
    }
  }

  /**
   * RecordBuilder for Notification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notification>
    implements org.apache.avro.data.RecordBuilder<Notification> {

    /** Unique identifier of the notification */
    private java.util.UUID NotificationId;
    /** Date of event creation */
    private java.time.Instant EventTimestamp;
    /** Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense) */
    private java.lang.CharSequence System;
    private java.lang.Object Message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Notification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.NotificationId)) {
        this.NotificationId = data().deepCopy(fields()[0].schema(), other.NotificationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.EventTimestamp)) {
        this.EventTimestamp = data().deepCopy(fields()[1].schema(), other.EventTimestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.System)) {
        this.System = data().deepCopy(fields()[2].schema(), other.System);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Message)) {
        this.Message = data().deepCopy(fields()[3].schema(), other.Message);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Notification instance
     * @param other The existing instance to copy.
     */
    private Builder(Notification other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.NotificationId)) {
        this.NotificationId = data().deepCopy(fields()[0].schema(), other.NotificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EventTimestamp)) {
        this.EventTimestamp = data().deepCopy(fields()[1].schema(), other.EventTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.System)) {
        this.System = data().deepCopy(fields()[2].schema(), other.System);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Message)) {
        this.Message = data().deepCopy(fields()[3].schema(), other.Message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'NotificationId' field.
      * Unique identifier of the notification
      * @return The value.
      */
    public java.util.UUID getNotificationId() {
      return NotificationId;
    }


    /**
      * Sets the value of the 'NotificationId' field.
      * Unique identifier of the notification
      * @param value The value of 'NotificationId'.
      * @return This builder.
      */
    public Notification.Builder setNotificationId(java.util.UUID value) {
      validate(fields()[0], value);
      this.NotificationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'NotificationId' field has been set.
      * Unique identifier of the notification
      * @return True if the 'NotificationId' field has been set, false otherwise.
      */
    public boolean hasNotificationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'NotificationId' field.
      * Unique identifier of the notification
      * @return This builder.
      */
    public Notification.Builder clearNotificationId() {
      NotificationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventTimestamp' field.
      * Date of event creation
      * @return The value.
      */
    public java.time.Instant getEventTimestamp() {
      return EventTimestamp;
    }


    /**
      * Sets the value of the 'EventTimestamp' field.
      * Date of event creation
      * @param value The value of 'EventTimestamp'.
      * @return This builder.
      */
    public Notification.Builder setEventTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.EventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EventTimestamp' field has been set.
      * Date of event creation
      * @return True if the 'EventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EventTimestamp' field.
      * Date of event creation
      * @return This builder.
      */
    public Notification.Builder clearEventTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'System' field.
      * Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
      * @return The value.
      */
    public java.lang.CharSequence getSystem() {
      return System;
    }


    /**
      * Sets the value of the 'System' field.
      * Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
      * @param value The value of 'System'.
      * @return This builder.
      */
    public Notification.Builder setSystem(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.System = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'System' field has been set.
      * Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
      * @return True if the 'System' field has been set, false otherwise.
      */
    public boolean hasSystem() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'System' field.
      * Name of the system where the message originated from (eg. Captain Peter, Mobile Platform, Tenant name or consumer group name, whatever makes sense)
      * @return This builder.
      */
    public Notification.Builder clearSystem() {
      System = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Message' field.
      * @return The value.
      */
    public java.lang.Object getMessage() {
      return Message;
    }


    /**
      * Sets the value of the 'Message' field.
      * @param value The value of 'Message'.
      * @return This builder.
      */
    public Notification.Builder setMessage(java.lang.Object value) {
      validate(fields()[3], value);
      this.Message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Message' field has been set.
      * @return True if the 'Message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Message' field.
      * @return This builder.
      */
    public Notification.Builder clearMessage() {
      Message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notification build() {
      try {
        Notification record = new Notification();
        record.NotificationId = fieldSetFlags()[0] ? this.NotificationId : (java.util.UUID) defaultValue(fields()[0]);
        record.EventTimestamp = fieldSetFlags()[1] ? this.EventTimestamp : (java.time.Instant) defaultValue(fields()[1]);
        record.System = fieldSetFlags()[2] ? this.System : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Message = fieldSetFlags()[3] ? this.Message :  defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notification>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notification>
    READER$ = (org.apache.avro.io.DatumReader<Notification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










