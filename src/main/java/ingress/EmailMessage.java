/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ingress;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EmailMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1772257494084895263L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmailMessage\",\"namespace\":\"com.maersk.notification.avro.ingress\",\"fields\":[{\"name\":\"TemplateId\",\"type\":\"string\",\"doc\":\"Identifier of the email template to be used\"},{\"name\":\"Recipient\",\"type\":\"string\",\"doc\":\"Email of the recipient that should receive email with the message\"},{\"name\":\"EmailVariables\",\"type\":\"string\",\"doc\":\"JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}\",\"aliases\":[\"variables\"]},{\"name\":\"Attachments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Attachment\",\"fields\":[{\"name\":\"Filename\",\"type\":\"string\"},{\"name\":\"Content\",\"type\":\"bytes\"},{\"name\":\"Type\",\"type\":[\"null\",\"string\"],\"doc\":\"Mime type of the file contents\",\"default\":null}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmailMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmailMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmailMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmailMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmailMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmailMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmailMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmailMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmailMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifier of the email template to be used */
  private java.lang.CharSequence TemplateId;
  /** Email of the recipient that should receive email with the message */
  private java.lang.CharSequence Recipient;
  /** JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]} */
  private java.lang.CharSequence EmailVariables;
  private java.util.List<Attachment> Attachments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmailMessage() {}

  /**
   * All-args constructor.
   * @param TemplateId Identifier of the email template to be used
   * @param Recipient Email of the recipient that should receive email with the message
   * @param EmailVariables JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
   * @param Attachments The new value for Attachments
   */
  public EmailMessage(java.lang.CharSequence TemplateId, java.lang.CharSequence Recipient, java.lang.CharSequence EmailVariables, java.util.List<Attachment> Attachments) {
    this.TemplateId = TemplateId;
    this.Recipient = Recipient;
    this.EmailVariables = EmailVariables;
    this.Attachments = Attachments;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TemplateId;
    case 1: return Recipient;
    case 2: return EmailVariables;
    case 3: return Attachments;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TemplateId = (java.lang.CharSequence)value$; break;
    case 1: Recipient = (java.lang.CharSequence)value$; break;
    case 2: EmailVariables = (java.lang.CharSequence)value$; break;
    case 3: Attachments = (java.util.List<Attachment>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TemplateId' field.
   * @return Identifier of the email template to be used
   */
  public java.lang.CharSequence getTemplateId() {
    return TemplateId;
  }


  /**
   * Sets the value of the 'TemplateId' field.
   * Identifier of the email template to be used
   * @param value the value to set.
   */
  public void setTemplateId(java.lang.CharSequence value) {
    this.TemplateId = value;
  }

  /**
   * Gets the value of the 'Recipient' field.
   * @return Email of the recipient that should receive email with the message
   */
  public java.lang.CharSequence getRecipient() {
    return Recipient;
  }


  /**
   * Sets the value of the 'Recipient' field.
   * Email of the recipient that should receive email with the message
   * @param value the value to set.
   */
  public void setRecipient(java.lang.CharSequence value) {
    this.Recipient = value;
  }

  /**
   * Gets the value of the 'EmailVariables' field.
   * @return JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
   */
  public java.lang.CharSequence getEmailVariables() {
    return EmailVariables;
  }


  /**
   * Sets the value of the 'EmailVariables' field.
   * JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
   * @param value the value to set.
   */
  public void setEmailVariables(java.lang.CharSequence value) {
    this.EmailVariables = value;
  }

  /**
   * Gets the value of the 'Attachments' field.
   * @return The value of the 'Attachments' field.
   */
  public java.util.List<Attachment> getAttachments() {
    return Attachments;
  }


  /**
   * Sets the value of the 'Attachments' field.
   * @param value the value to set.
   */
  public void setAttachments(java.util.List<Attachment> value) {
    this.Attachments = value;
  }

  /**
   * Creates a new EmailMessage RecordBuilder.
   * @return A new EmailMessage RecordBuilder
   */
  public static EmailMessage.Builder newBuilder() {
    return new EmailMessage.Builder();
  }

  /**
   * Creates a new EmailMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmailMessage RecordBuilder
   */
  public static EmailMessage.Builder newBuilder(EmailMessage.Builder other) {
    if (other == null) {
      return new EmailMessage.Builder();
    } else {
      return new EmailMessage.Builder(other);
    }
  }

  /**
   * Creates a new EmailMessage RecordBuilder by copying an existing EmailMessage instance.
   * @param other The existing instance to copy.
   * @return A new EmailMessage RecordBuilder
   */
  public static EmailMessage.Builder newBuilder(EmailMessage other) {
    if (other == null) {
      return new EmailMessage.Builder();
    } else {
      return new EmailMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmailMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmailMessage>
    implements org.apache.avro.data.RecordBuilder<EmailMessage> {

    /** Identifier of the email template to be used */
    private java.lang.CharSequence TemplateId;
    /** Email of the recipient that should receive email with the message */
    private java.lang.CharSequence Recipient;
    /** JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]} */
    private java.lang.CharSequence EmailVariables;
    private java.util.List<Attachment> Attachments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EmailMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TemplateId)) {
        this.TemplateId = data().deepCopy(fields()[0].schema(), other.TemplateId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Recipient)) {
        this.Recipient = data().deepCopy(fields()[1].schema(), other.Recipient);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.EmailVariables)) {
        this.EmailVariables = data().deepCopy(fields()[2].schema(), other.EmailVariables);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Attachments)) {
        this.Attachments = data().deepCopy(fields()[3].schema(), other.Attachments);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing EmailMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(EmailMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.TemplateId)) {
        this.TemplateId = data().deepCopy(fields()[0].schema(), other.TemplateId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Recipient)) {
        this.Recipient = data().deepCopy(fields()[1].schema(), other.Recipient);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EmailVariables)) {
        this.EmailVariables = data().deepCopy(fields()[2].schema(), other.EmailVariables);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Attachments)) {
        this.Attachments = data().deepCopy(fields()[3].schema(), other.Attachments);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'TemplateId' field.
      * Identifier of the email template to be used
      * @return The value.
      */
    public java.lang.CharSequence getTemplateId() {
      return TemplateId;
    }


    /**
      * Sets the value of the 'TemplateId' field.
      * Identifier of the email template to be used
      * @param value The value of 'TemplateId'.
      * @return This builder.
      */
    public EmailMessage.Builder setTemplateId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.TemplateId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TemplateId' field has been set.
      * Identifier of the email template to be used
      * @return True if the 'TemplateId' field has been set, false otherwise.
      */
    public boolean hasTemplateId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TemplateId' field.
      * Identifier of the email template to be used
      * @return This builder.
      */
    public EmailMessage.Builder clearTemplateId() {
      TemplateId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Recipient' field.
      * Email of the recipient that should receive email with the message
      * @return The value.
      */
    public java.lang.CharSequence getRecipient() {
      return Recipient;
    }


    /**
      * Sets the value of the 'Recipient' field.
      * Email of the recipient that should receive email with the message
      * @param value The value of 'Recipient'.
      * @return This builder.
      */
    public EmailMessage.Builder setRecipient(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Recipient = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Recipient' field has been set.
      * Email of the recipient that should receive email with the message
      * @return True if the 'Recipient' field has been set, false otherwise.
      */
    public boolean hasRecipient() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Recipient' field.
      * Email of the recipient that should receive email with the message
      * @return This builder.
      */
    public EmailMessage.Builder clearRecipient() {
      Recipient = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EmailVariables' field.
      * JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
      * @return The value.
      */
    public java.lang.CharSequence getEmailVariables() {
      return EmailVariables;
    }


    /**
      * Sets the value of the 'EmailVariables' field.
      * JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
      * @param value The value of 'EmailVariables'.
      * @return This builder.
      */
    public EmailMessage.Builder setEmailVariables(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.EmailVariables = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EmailVariables' field has been set.
      * JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
      * @return True if the 'EmailVariables' field has been set, false otherwise.
      */
    public boolean hasEmailVariables() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EmailVariables' field.
      * JSON encoded payload for email dynamic variables. For example {'name': 'Surname', 'events': [{...}, ...]}
      * @return This builder.
      */
    public EmailMessage.Builder clearEmailVariables() {
      EmailVariables = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Attachments' field.
      * @return The value.
      */
    public java.util.List<Attachment> getAttachments() {
      return Attachments;
    }


    /**
      * Sets the value of the 'Attachments' field.
      * @param value The value of 'Attachments'.
      * @return This builder.
      */
    public EmailMessage.Builder setAttachments(java.util.List<Attachment> value) {
      validate(fields()[3], value);
      this.Attachments = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Attachments' field has been set.
      * @return True if the 'Attachments' field has been set, false otherwise.
      */
    public boolean hasAttachments() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Attachments' field.
      * @return This builder.
      */
    public EmailMessage.Builder clearAttachments() {
      Attachments = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmailMessage build() {
      try {
        EmailMessage record = new EmailMessage();
        record.TemplateId = fieldSetFlags()[0] ? this.TemplateId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Recipient = fieldSetFlags()[1] ? this.Recipient : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.EmailVariables = fieldSetFlags()[2] ? this.EmailVariables : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Attachments = fieldSetFlags()[3] ? this.Attachments : (java.util.List<Attachment>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmailMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmailMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmailMessage>
    READER$ = (org.apache.avro.io.DatumReader<EmailMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.TemplateId);

    out.writeString(this.Recipient);

    out.writeString(this.EmailVariables);

    long size0 = this.Attachments.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (Attachment e0: this.Attachments) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.TemplateId = in.readString(this.TemplateId instanceof Utf8 ? (Utf8)this.TemplateId : null);

      this.Recipient = in.readString(this.Recipient instanceof Utf8 ? (Utf8)this.Recipient : null);

      this.EmailVariables = in.readString(this.EmailVariables instanceof Utf8 ? (Utf8)this.EmailVariables : null);

      long size0 = in.readArrayStart();
      java.util.List<Attachment> a0 = this.Attachments;
      if (a0 == null) {
        a0 = new SpecificData.Array<Attachment>((int)size0, SCHEMA$.getField("Attachments").schema());
        this.Attachments = a0;
      } else a0.clear();
      SpecificData.Array<Attachment> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Attachment>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          Attachment e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new Attachment();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.TemplateId = in.readString(this.TemplateId instanceof Utf8 ? (Utf8)this.TemplateId : null);
          break;

        case 1:
          this.Recipient = in.readString(this.Recipient instanceof Utf8 ? (Utf8)this.Recipient : null);
          break;

        case 2:
          this.EmailVariables = in.readString(this.EmailVariables instanceof Utf8 ? (Utf8)this.EmailVariables : null);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<Attachment> a0 = this.Attachments;
          if (a0 == null) {
            a0 = new SpecificData.Array<Attachment>((int)size0, SCHEMA$.getField("Attachments").schema());
            this.Attachments = a0;
          } else a0.clear();
          SpecificData.Array<Attachment> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Attachment>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              Attachment e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new Attachment();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










